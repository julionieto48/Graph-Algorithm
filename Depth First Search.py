# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vqhpo0Tu7qBRQG3RDFAHTSybcYrM1C6I
"""

# depth search algorithm
matAdj = [[0,1,0,0], 
          [1,0,1,1], 
          [0,1,0,1],
          [0,1,1,0]]

adjList = {
    0 : [1],
    1 : [2,3],
    2 : [1,3],
    3 : [1]   
}

# arreglo de visitados
visitados = [0,0,0,0]    # cantidad de nodos

stack = [0]              # colocar el nodo de inicio en el stack  ej: inicia en el nodo cero

visitados[0] = 1         # el nodo cero 

nodo = stack.pop(len(stack)-1) # sacar elemento del stack
print(nodo)

while True: 

  for i in range(0, len(visitados)) : # iterar en todos los nodos creados

    if matAdj[nodo][i] == 1 and visitados[i] == 0 :  # revisar que existe una ruta o conexion y que no he visitado ese nodo  

      visitados[i] = 1  # marcar como visitado
      stack.append(i)  # poner elemnto en el stack... crea la ruta
  
  if len(stack) == 0:
    break
  else:
    nodo = stack.pop()  # sacar el elemento del stack
    print(nodo)

import algorithmx
import networkx as nx
G = nx.Graph()



G.add_nodes_from([0,1,2,3])
G.add_edges_from([(0,1), (1,3),(1,2),(2,3)])
nx.draw(G, with_labels=True, font_weight='bold')

#https://algorithmx-python.readthedocs.io/en/latest/examples/basic-examples.html

#!pip install matplotlib-venn
!pip install networkx
!pip install algorithmx

import algorithmx
import networkx as nx
from random import randint

canvas = algorithmx.jupyter_canvas()

# Create a directed graph
G = nx.circular_ladder_graph(5).to_directed()
# Randomize edge weights
nx.set_edge_attributes(G, {e: {'weight': randint(1, 9)} for e in G.edges})

# Add nodes
canvas.nodes(G.nodes).add()

# Add directed edges with weight labels
canvas.edges(G.edges).add().directed(True) \
    .label().text(lambda e: G.edges[e]['weight'])

